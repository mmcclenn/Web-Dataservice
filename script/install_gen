#!/usr/bin/env perl

=head1 NAME

wdsinstallfiles - helper script to create new Web::DataService applications

=head1 SYNOPSIS

wdsinstallfiles [options] [files]

=head1 OPTIONS

    -h, --help            : print what you are currently reading
    -f, --force           : force installation
    -p, --path            : the path where application will be created
                              (current directory if not specified)
    -x, --no-check        : don't check for the latest version of Web::DataService
                              (checking version implies internet connection)
    -v, --version         : print the version of Web::DataService being used

If you name one or more files or file paths, i.e. "doc" or
"bin/dataservice.pl", then only that file or files will be installed.
Otherwise, all files necessary for the example application will be installed.

=cut

eval 'exec /opt/local/bin/perl5.12  -S $0 ${1+"$@"}'
    if 0; # not running under some shell

use lib 'lib';

use strict;
use warnings;
use File::Basename 'basename', 'dirname';
use File::Path 'mkpath';
use File::Spec::Functions;
use Getopt::Long;
use Pod::Usage;
use LWP::UserAgent;

use Web::DataService;

use constant FILE => 1;
use constant EXEC => 2;
use constant REMOVE => 4;


# options
my $help = 0;
my $no_check = 0;
my $report_version = 0;
my $name = undef;
my $path = '.';
my $force_install = 0;
my $make = 0;


GetOptions(
    "h|help"          => \$help,
    "f|force"	      => \$force_install,
    "p|path=s"        => \$path,
    "x|no-check"      => \$no_check,
    "v|version"       => \$report_version,
    "M|make"          => \$make,
) or pod2usage( -verbose => 1 );

# main

my $PERL_INTERPRETER = -r '/usr/bin/env' ? '!/usr/bin/env perl -T' : "!$^X -T";
my $DO_OVERWRITE_ALL = -r 'bin/app.pl';

my $TARGET_NAME = 'wdsinstallfiles';

if ( $make )
{
    &make_program;
    exit(0);
}

pod2usage( -verbose => 1 ) if $help;

die "Cannot write to $path: $!\n" unless -d $path && -w $path;

my $WDS_VERSION   = $Web::DataService::VERSION;

if ( $report_version )
{
    print "Web::DataService $WDS_VERSION\n";
    exit 0;
}

# If filename arguments were specified, grab those.

my (%INSTALL_FILTER);

foreach my $f ( @ARGV )
{
    $INSTALL_FILTER{$f} = 1;
}


# Now determine which foundation framework we are using.  Currently, the only
# one available is Dancer.

if ( -r "environments" && -r "public/404.html" )
{
    eval { require Dancer };
    
    unless ( $INC{'Dancer.pm'} )
    {
	die "It looks as though you are trying to build a Dancer application, but Dancer is not installed.\n";
    }
    
    eval { require YAML; };
    
    unless ( $INC{'YAML.pm'} )
    {
	die "You must install YAML in order to use Web::DataService with Dancer.\n";
    }
    
    version_check() unless $no_check;
    unpack_files( &dancer_app_tree, &templates, '.' );
    exit 0;
}

else
{
    eval { require Dancer };
    
    unless ( $INC{'Dancer.pm'} )
    {
	die "You must install Dancer in order to use Web::DataService.\n";
    }
    
    if ( $force_install )
    {
	version_check() unless $no_check;
	unpack_files( &dancer_app_tree, &templates, '.' );
    }
    
    die "You must run this program from the root directory of an already-installed Dancer application.  Try 'dancer -a myappname'.\n"
	unless $force_install;
}


# dancer_app_tree ( )
# 
# Return the install tree for a Dancer-based application.  Currently this is
# the only one available, but we will eventually add catalyst_app_tree, etc.

sub dancer_app_tree {
    
    return {
        "lib" => {
            "Example.pm" => FILE,
	    "PopulationData.pm" => FILE,
        },
        "bin" => {
            "dataservice.pl" => EXEC,
	    "app.pl" => REMOVE,
        },
        "config.yml"         => FILE,
	"data" => {
	    "population_data.txt" => FILE,
	},
	"doc" => {
	    "doc_defs.tt"    => FILE,
	    "doc_strings.tt" => FILE,
	    "doc_header.tt"  => FILE,
	    "doc_footer.tt"  => FILE,
	    "doc_not_found.tt" => FILE,
	    "operation.tt"   => FILE,
	    "index.tt"       => FILE,
            "special_doc.tt" => FILE,
	    "formats" => {
	        "json_doc.tt" => FILE,
		"text_doc.tt" => FILE,
		"index.tt" => FILE,
	    },
	},
        "public" => {
            "css"            => {
                "dsdoc.css" => FILE,
            },
        },
    };
}


# unpack_files ( tree, templates, path )
# 
# This subroutine is called recursively to unpack a tree of files.  The tree
# structure must be passed as the first argument, followed by a hash whose
# keys are paths from the tree and whose values are the corresponding file
# contents.  The third argument is the path under which to create the files.

sub unpack_files {
    
    my ($node, $templates, $file_root, $template_root, $subtree_override) = @_;
    
    while ( my ($name, $thing) = each %$node )
    {
	next unless defined $thing;
	
        my $file_path = catfile($file_root, $name);
	my $template_path = $template_root ? "$template_root/$name" : $name;
	
	my $in_subtree = $subtree_override;
	
	if ( %INSTALL_FILTER )
	{
	    next unless $INSTALL_FILTER{$template_path} || $in_subtree;
	    $in_subtree = 1;
	}
	
        if ( ref $thing eq 'HASH' )
	{
            safe_mkdir($file_path);
            unpack_files($thing, $templates, $file_path, $template_path, $in_subtree);
        }
	
	elsif ( ref $thing eq 'CODE' )
	{
            # The content is a coderef, which, given the path to the file it
            # should create, will do the appropriate thing:
            $thing->($file_path);
	}
	
	else
	{
	    if ( $thing eq FILE || $thing eq EXEC )
	    {
		my $template = $templates->{$template_path};
		
		unless ( defined $template )
		{
		    warn "no template found for $template_path";
		    next;
		}
		
		my $vars = { PERL_INTERPRETER => $PERL_INTERPRETER };
		
		write_file($file_path, $template, $vars);
		chmod 0755, $file_path if $thing eq EXEC;
	    }
	    
	    elsif ( $thing eq REMOVE )
	    {
		unlink($file_path);
	    }
        }
    }
}

sub safe_mkdir {
    my ($dir) = @_;
    if (not -d $dir) {
        print "+ $dir\n";
        mkpath $dir or die "could not mkpath $dir: $!";
    }
    else {
        print "  $dir\n";
    }
}


# read_file ( path, contents_ref )
# 
# Read a file using the filename given by $path, and append its contents to the
# scalar pointed to by $contents_ref.  Change any initial occurrence of = to
# ), so that files containing Pod are protected from interpretation.

sub read_file {

    my ($path, $contents_ref) = @_;
    
    my $infile;
    
    unless ( open $infile, "<", $path )
    {
	warn "Cannot read $path: $!\n";
	return;
    }
    
    while (<$infile>)
    {
	s{^=}{)};
	s{^use lib '\.\.}{#use lib '..}m;
	$$contents_ref .= $_;
    }
    
    close $infile or warn $!;
}


# write_file ( path, template, vars )
# 
# Write a file to the filename given by $path, using $template as the file
# contents.  Substitute any occurrence of <<% var_name %> by looking up
# 'var_name' in $vars.
# 
# Change any occurrence of ) at the beginning of a line to =, to reverse the
# transformation carried out in &read_file.

sub write_file {
    my ($path, $template, $vars) = @_;
    
    # if file already exists, ask for confirmation
    if (-f $path && (not $DO_OVERWRITE_ALL)) {
        print "! $path exists, overwrite? [N/y/a]: ";
        my $res = <STDIN>; chomp($res);
        $DO_OVERWRITE_ALL = 1 if $res eq 'a';
        return 0 unless ($res eq 'y') or ($res eq 'a');
    }

    $template =~ s| <<% \s* (\w+) \s* %>> | $vars->{$1} |xmge;
    $template =~ s| ^[)] | "=" |xmge;
    
    print "+ $path\n";
    
    my $fh;
    open $fh, '>', $path or die "unable to open file `$path' for writing: $!";
    print $fh $template;
    close $fh;
}

sub send_http_request {
    my $url = shift;
    my $ua = LWP::UserAgent->new;
    $ua->timeout(10);
    $ua->env_proxy();

    my $response = $ua->get($url);

    if ($response->is_success) {
        return $response->content;
    }
    else {
        return;
    }
}

sub version_check {
    my $latest_version = 0;
    
    my $resp = send_http_request('http://search.cpan.org/api/module/Web::DataService');

    if ($resp) {
        if ( $resp =~ /"version" (?:\s+)? \: (?:\s+)? "(\d\.\d+)"/x ) {
            $latest_version = $1;
        } else {
            die "Can't understand search.cpan.org's reply.\n";
        }
    }

    return if $WDS_VERSION =~  m/_/;

    if ($latest_version > $WDS_VERSION) {
        print qq|
The latest stable Dancer release is $latest_version, you are currently using $WDS_VERSION.
Please check http://search.cpan.org/dist/Dancer/ for updates.

|;
    }
}

# make_program ( )
# 
# Create a new script called $TARGET_NAME, in the same directory as this
# one, but with the string __TEMPLATES_GO_HERE__ replaced by the contents of
# each of the files listed in the app_tree hash (see below).  These files are
# copied from the directory "./files".

sub make_program {
    
    # First get all of the contents.
    
    my $contents = '';
    pack_files( &dancer_app_tree, \$contents, './files' );
    
    my $source_name = $0;
    my $target_name = $source_name;
    $target_name =~ s{ [^/]+ $ }{ $TARGET_NAME }xe;
    
    open my $source, "<", $source_name or die "File $source_name: $!";
    open my $target, ">", $target_name or die "File $target_name: $!";
    
    while (<$source>)
    {
	if ( /^#_TEMPLATES_GO_HERE/ )
	{
	    print $target $contents;
	}
	
	else
	{
	    print $target $_;
	}
    }
    
    close $source or die "File $source_name: $!";
    close $target or die "File $target_name: $!";
    
    chmod(0755, $target_name) or die "File $target_name: $!";
}

sub pack_files {
    
    my ($node, $contents_ref, $file_root, $template_root) = @_;
    
    while ( my ($name, $thing) = each %$node )
    {
	next unless defined $thing;
	
	my $file_path = "$file_root/$name";
	my $template_path = $template_root ? "$template_root/$name" : $name;
	
	if ( ref $thing eq 'HASH' )
	{
	    pack_files($thing, $contents_ref, $file_path, $template_path);
	}
	
	elsif ( $thing eq FILE || $thing eq EXEC )
	{
	    $$contents_ref .= "    '$template_path' => << 'END_END_END',\n";
	    my $content = read_file($file_path, $contents_ref);
	    $$contents_ref .= "END_END_END\n";
	}
    }
}


=head1 DESCRIPTION

This script is designed to be run inside the main directory of a newly-created
Dancer application.  It adds the files necessary for the Web::DataService
example application (see L<Web::DataService::Tutorial>) which you can then use
as a basis for your own project.

=head1 EXAMPLE

Here is an application created using dancer and wdsinstallfiles:

    $ dancer -a dstest
    + dstest
    + dstest/bin
    + dstest/bin/app.pl
    + dstest/config.yml
    + dstest/environments
    + dstest/environments/development.yml
    + dstest/environments/production.yml
    + dstest/views
    + dstest/views/index.tt
    + dstest/views/layouts
    + dstest/views/layouts/main.tt
    + dstest/lib
    + dstest/lib/dstest.pm
    + dstest/public
    + dstest/public/css
    + dstest/public/css/style.css
    + dstest/public/css/error.css
    + dstest/public/images
    + dstest/public/500.html
    + dstest/public/404.html
    + dstest/public/dispatch.fcgi
    + dstest/public/dispatch.cgi
    + dstest/public/javascripts
    + dstest/public/javascripts/jquery.js
    + dstest/Makefile.PL
    + dstest/t
    + dstest/t/002_index_route.t
    + dstest/t/001_base.t
    
    $ cd dstest
    $ wdsinstallfiles
    + ./config.yml
      ./bin
    + bin/dataservice.pl
      ./public
      public/css
    + public/css/dsdoc.css
      ./lib
    + lib/PopulationData.pm
    + lib/Example.pm
      ./doc
    + doc/doc_footer.tt
    + doc/doc_not_found.tt
    + doc/index.tt
    + doc/doc_header.tt
      doc/formats
    + doc/formats/index.tt
    + doc/formats/json_doc.tt
    + doc/formats/text_doc.tt
    + doc/doc_defs.tt
    + doc/special_doc.tt
    + doc/operation.tt
    + doc/doc_strings.tt
      ./data
    + data/population_data.txt

The application is ready to serve:

    $ bin/dataservice.pl
    >> Listening on 0.0.0.0:3000
    == Entering the development dance floor ...

=head1 AUTHOR

This script has been written by Michael McClennen <mmcclenn@cpan.org>, based on
the "dancer" script from the L<Dancer> distribution.

=head1 SOURCE CODE

See L<Web::DataService> for more information.

=head1 LICENSE

This module is free software and is published under the same
terms as Perl itself.

=cut


sub templates {

    return {

#_TEMPLATES_GO_HERE

    };
}

