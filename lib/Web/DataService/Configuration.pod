

=head1 NAME

Web::DataService::Configuration - configuration attributes and how to use them

=head1 SYNOPSIS

This document lists the various attributes available for you to use in
configuring a data service with L<Web::DataService>.

=head1 SYNTAX

The various configuration methods provided by L<Web::DataService> all use a
consistent syntax.  With the possible exception of an initial name parameter,
all of the rest of the parameters must be either hashrefs or strings.  The
hashrefs each configure some object, and the strings each document the object
that they follow.  We refer to this mix of attribute hashrefs and
documentation strings as a I<definition list>.

    $ds->define_format(
	{ name => 'json', content_type => 'application/json',
	  doc_path => 'formats/json', title => 'JSON',
	  default_vocab => 'com' },
	    "The JSON format is intended primarily to support client applications,",
	    "including the PBDB Navigator.  Response fields are named using compact",
	    "3-character field names.",
	{ name => 'xml', disabled => 1, content_type => 'text/xml', title => 'XML',
	  doc_path => 'formats/xml',
	  default_vocab => 'dwc' },
	    "The XML format is intended primarily to support data interchange with",
	    "other databases, using the Darwin Core element set.");

For example, the above call defines two output formats: one named 'json' and
the other named 'xml'.  Each of these formats is defined by the set of
attributes contained in a hashref.  All of the documentation strings are
automatically collected (joined by newlines) as the attribute "doc" of the
object whose definition they immediately follow.

=head2 Attribute value syntax

In general, whenever an attribute can take a list of values, you specify those
values as a string with the items separated by commas and arbitrary
whitespace.  For example, the following are identical:

   output => 'basic , extra'
   output => 'basic,extra'

=head1 ATTRIBUTES

In order to fully define a data service using this framework, your code must
carry out the following steps:

=over

=item 1)

Generate a new instance of Web::DataService.

=item 2)

Define one or more output vocabularies using C<define_vocab>.  This step is
optional, and a default vocabulary will be automatically generated if you do
not specify any.

=item 3)

Define one or more output formats using C<define_format>.  This must follow
any vocabulary definitions, and must precede the node definitions.

=item 4)

Define some data service nodes using C<define_node>.

=item 5)

Define one or more output blocks using C<define_block>.

=item 6)

Define value sets using C<define_set> (or C<define_output_map>).  This step is
optional, but you will need to do this if you wish to provide variable output.

=item 7)

Define one or more parameter validation rulesets using C<define_ruleset>.

=item 8)

Define one or more packages to handle the various classes of output data, and
make them into Roles with C<use Moo::Role>.

=item 9)

Define one or more subs in these packages to implement the various data service
operations that you wish to provide.

=back

You may find it convenient to put some or all of the definitions from steps
4-9 together in the various Role files.  In each Role package you may define a
sub named 'initialize', which will be called automatically.  Its first
argument will be the class and its second will be a reference to the data
service instance.  You can use the latter to call C<define_block>, etc. to
define the various elements relevant to that class.

You may also find it convenient to put all of the node definitions together,
so that the hierarchical relationships will be apparent.  Exactly how you
structure your applicaton is up to you.

The attributes that you can use in defining these different types of elements
are listed below.

=head2 Data service instantiation

A new data service is instantiated by calling the C<new> method of
L<Web::DataService|Web::DataService/"new">, as follows:

    my $ds = Web::DataService->new({ name => 'data1.0', ... });

The "..." in the above example represents some set of attributes chosen from
the list below.  With a few exceptions noted below, any attributes that you do
not specify in the call to C<new> will be looked up in the configuration file
provided by the foundation framework (F<config.yml> in the case of L<Dancer>).
Any not specified there will be given default values, as indicated in the
documentation for the individual attributes.  For most attributes, it is up to
you whether to specify them in the instantiation method call or in the
configuration file.

When a new data service is instantiated, any attributes not explicitly
specified in the instantiation call are looked up in the configuration file
under the value provided for the required attribute C<name>.  If not found,
they are then looked up as direct attributes.  For example, if the
configuration file has the contents listed below, the above call will produce
a data service with a C<default_limit> of C<1000> and a C<default_header> of
C<1>.  This allows you to configure several different data services that share
some attribute values but not others.

    default_limit: 500
    default_header: 1
    
    data1.0:
	default_limit: 1000
    
    data2.0:
        default_limit: 1200

In the list below, entries indicated by C<[req]> are required attributes.  Those
followed by C<[inst]> must be specified in the call to C<new> rather than in
the configuration file.  Those indicated by C<[mod]> have default values
according to which modules have been required at the time the data service is
instantiated.

Most of the attributes that are allowed for data service nodes can also be
specified for the data service instance, in which case these values will
provide a default that can be overridden by individual nodes.

All of the data service attributes have identically-named accessor methods.
These are all read-only; the attributes may only be set at the time of
instantiation.

=head2 Data service attributes

=head3 name [req] [inst]

Specifies a unique identifier for this data service.  You must specify this in
the instantiation method call, because it is used to find attribute values in
the configuration file.

=head3 features [req] [inst]

Specifies the set of built-in features to be enabled for this data service.
The value of this attribute must be a comma-separated list of feature names
from the list given below.  You can turn a feature off by prefixing its name
with C<no_>, and you can use 'standard' to enable all of the available
features.  So the following will enable all of the features except
"doc_paths":

    features => 'standard, no_doc_paths'

while the following will enable just 'format_suffix' and 'documentation':

    features => 'format_suffix, documentation'

The individual features are as follows:

=head4 format_suffix

This feature causes the output format of any request to be set from the suffix
on the URL path.  If enabled, a request with the URL path "/my/operation.json"
will select the operation corresponding to the data service node
"my/operation" and will render the output using the format named "json".

=head4 documentation

This feature will auto-generate documentation pages for the various data
service operations.  If enabled, the URL path "/" will always generate a main
documentation page, and a URL without any suffix will generate a documentation
page corresponding to the selected data service node.  You are also able to
create additional documentation nodes and templates as well.  In order to make
use of this feature, you must also ensure that a L<templating
plugin|/"templating_plugin">
is loaded.

=head4 doc_paths

This feature will enable additional URL paths for accessing documentation.  If
enabled, a request with the URL path "/my/operation_doc" or (if
C<format_suffix> is also enabled) "/my/operation_doc.html" will produce the
documentation page for the data service node "my/operation".  The URL path
"/my/operation", on the other hand, will execute the operation and return the
result.

You can change the documentation suffix from "_doc" to something else by
setting the attribute L<doc_suffix|/"doc_suffix">.

=head4 send_files

This feature will enable you to define data service nodes that respond with
the contents of files from disk.  Its primary purpose is to provide access to
the CSS files that accompany the documentation pages.  You may, however, use
it to provide access to other files as well.  If you disable this feature but
enable the 'documentation' feature, you will need to arrange for the
documentation CSS file to be provided separately.

=head4 strict_params

If this feature is enabled, then any parameter names that are not recognized
by the ruleset corresponding to the selected data service node will cause a
request to be rejected with a result code of 400 (bad request).  If disabled,
then bad parameter names will generate warnings instead.

=head4 stream_output

If this feature is enabled, then any response body larger than the value of
L<stream_threshold|/"stream_threshold"> will be streamed to the client instead
of being sent in a single chunk.  This feature should be enabled for any
service which can produce large responses, because otherwise the process of
marshalling such responses will take up large amounts of server memory and CPU
time, and may cause excessive paging.

=head3 special_params [req] [inst]

The Web::DataService module can process certain request parameters in special
ways.  Each of these special parameters has an internal name for use in the
data service application code, and an external name which you can set to
any string you choose.  It is this external name which is recognized in actual
requests to the data service.

The value of C<special_params> must be a list of special parameter names.  You
can turn off any of these by prefixing the name with C<no_>, and you can
change the external name by adding C<=name>.  The name 'standard' produces a
standard list (see below).  So the following attribute value would enable the
standard list except for 'datainfo' and would set the external name of the
'header' parameter to 'head'.

    special_params => 'standard, no_datainfo, header=head'

Once a set of special parameters is enabled, clients of the data service may
include any of them (or none) in any request.  The special parameters are as
follows:

=head4 selector

If enabled, this special parameter is used to select which version of the data
service should respond to the request.  Its external name defaults to C<v>
unless overridden.  If you enable this parameter, then you should give each
data service a different value for the attribute L<key|/"key">.

If you are running multiple versions of your data service from a single
application, or I<if you may want to create a second version at some point>,
then you should either enable this parameter or use a different value of
L<path_prefix|/"path_prefix"> for each of your data services.  One or the
other mechanism will ensure that the proper service is selected to respond to
each request.

=head4 format

If enabled, this special parameter is used to select the output format for the
request.  It is forbidden to enable this parameter if the feature
L</"format_suffix"> is also enabled.  You can enable it if you prefer your
clients to select the output format by means of a parameter rather than
through a suffix on the URL path.

=head4 show

If enabled, this special parameter is used to select optional output blocks in
addition to the default output for a particular request.  In this way, clients
can tailor the output of each request to provide just the information they
need and leave out information they do not need.

=head4 limit

If enabled, this special parameter is used to limit the number of result
records returned by a request.  The data service attribute L</default_limit>
can be used to provide a default limit for any request that does not specify
this attribute.  The value of this parameter can be any positive integer, 0,
or the string C<all>.  By using the latter value, a client can ensure that the
entire result set is provided.

This parameter, in combination with C<default_limit>, can be useful for data
services that are able to generate large result sets.  It prevents clients
from accidentally sending in request URLs that generate enormous responses,
while allowing the ability to acquire the full results when necessary.  A
client can also use this parameter in conjunction with L</offset> to obtain a
large result set in many smaller chunks.

=head4 offset

If enabled, this parameter indicates that the response should start at the
indicated position in the result set rather than at the beginning.  See also
L</limit>.

=head4 count

If enabled, a true value for this parameter indicates that the response should
include not only the result of the data service operation but also a count of
the number of records found, the number returned, and the elapsed time taken
in executing the operation.  A false value indicates that this information
should not be included.  The attribute L</default_count> specifies a default
to be used if this parameter is not specified.  This is a L<flag parameter|/"Flag
parameters"> (see below).

=head4 datainfo

If enabled, a true value for this parameter indicates that the response should
include not only the result of the data service operation but also a set of
descriptive information about the data.  The attribute L</default_datainfo>
specifies a default to be used if this parameter is not specified.  This is a
L<flag parameter|/"Flag parameters"> (see below). [Need to put in a link here
to more info.]

=head4 header

If enabled, a true value for this parameter indicates that the response should
include header material, the contents of which varies according to the output
format and the values of the C<count> and C<datainfo> parameters (if
enabled).  If false, no header material should be included.  This parameter is
ignored by the JSON output module.  It is useful only with the text formats,
and is generally given with a false value.  In this case, all header material
is suppressed and only the data records (one per line) are returned.  This is
a L<flag parameter|/"Flag parameters"> (see below).

=head4 linebreak

If enabled, this parameter can be used to select the linebreak sequence used
with text format responses.  The accepted values are C<cr> for a carriage
return, and C<crlf> for a carriage return/linefeed combination.  The default
external name for this parameter is C<lb>.

=head3 save

If enabled, this parameter can be used to indicate that the response should be
saved to disk rather than displayed in a browser window.  The server will
provide the appropriate headers, but it is up to the web browser or other
client software to decide how to handle them.  If this parameter is provided
with a value other than C<yes>, C<on>, C<1> or C<true>, it will be used as the
default filename with the selected output format appended as a suffix.  You
can also use the attribute L</default_filename> to provide a default in case
no filename was specified by the client.

=head3 vocab

If enabled, this parameter can be used by the client to specify which
vocabulary to use in expressing the result of a data service operation.  The
client can use this to override the default vocabulary for the selected output
format, or to select a vocabulary if the format does not specify a default.
Obviously, this special parameter should only be enabled if you have defined
additional output vocabularies.

=head3 foundation_plugin [req] [inst] [mod]

This attribute is not required if one of the known foundation frameworks
(currently only L<Dancer>) is already loaded.  If you put C<use Dancer> in
your main application file before C<use Web::DataService>, then the plugin
L<Web::DataService::Plugin::Dancer> will be loaded automatically.

The purpose of this plugin module is to interact with the foundation
framework, to carry out tasks such as receiving HTTP requests, producing HTTP
responses, and reading application configuration information.  The only reason
you might need to specify this attribute explicitly is if you wish to load a
different plugin and override the default choice.  If you do so, and the named
module is not already loaded, it will be automatically loaded.  See
L<Web::DataService::Plugins> for more about plugins.

=head3 templating_plugin [mod]

This attribute may be specified either at instantiation or in the
configuration file.  It must be the name of a Perl module, and will be
required if not already loaded.  The purpose of this plugin module is to
interface with a templating engine for the purpose of producing documentation
pages and/or result pages [note: result pages are not yet implemented].

If this attribute is not specified, and if
F<Template.pm> has already been loaded, then the plugin
L<Web::DataService::Plugin::TemplateToolkit> will be loaded automatically.
If no templating plugin is loaded, then documentation pages cannot be
produced.  In that case, the features 'documentation' and 'doc_paths' will be
automatically disabled if they were set.

=head3 backend_plugin [mod]

This attribute may be specified either at instantiation or in the
configuration file.  It must be the name of a Perl module, and will be
required if not already loaded.  The purpose of this plugin module is to
acquire a connection to a backend database or other system for the purpose of
reading or modifying data in response to data service requests.

If this attribute is not specified, and if F<Dancer/Plugin/Database.pm> has
already been loaded, then the plugin L<Web::DataService::Plugin::Dancer> will
be used in this role.

Unlike the other two plugin attributes, this one is not essential.  Your own
code for implementing the data service operations may simply acquire a backend
database connection in whatever manner is appropriate.

=head3 title [req]

Provides a title by which this data service can be referred to in
documentation pages, etc.  This attribute is required, but may be specified
either at instantiation or in the configuration file.

=head3 version

If specified, the value of this attribute is included in the standard
documentation template as part of the page header.  You can increment this
whenever you make a change to the interface.  The value can be any string,
i.e. "23" or "1.2b5".

=head3 path_prefix

If specfied, the value of this attribute must be a string.  That string will
be removed from the front of each request URL path before the path is matched
to a data service node, and will be prepended to each URL path that is
generated as part of the documentation.

If you are running more than one data service at a time (i.e. multiple
versions) then one good way to arrange this is by setting a different path
prefix for each one.

=head3 key

If specified, the value of this attribute must be a string.  If you are
running multiple data services and do not wish to use different path prefixes
to differentiate them, you can instead enable the special parameter 'version'
and set a different value of this attribute for each service.

You must write code as part of your main application to select the appropriate
service using the value of the 'version' parameter, but generated URLs will
include the value of this attribute as the value of the 'version' parameter
automatically.

=head3 ruleset_prefix

If specified, the value of this attribute must be a string.  It will be
prepended to any auto-generated ruleset names.

=head3 public_access

If given a true value, then all data service output will be considered
"public" and will have the CORS header "Access-control-allow-origin" set to
"*".  For the time being, every data service should have this attribute set.
A future version of this framework will provide better control over this.

=head3 doc_suffix

If specified, the value of this attribute must be a string.  It is only
relevant if the feature C<doc_paths> is enabled.  In that case, any URL path
ending in this string will have the string removed, and if the resulting path
matches a data service node then the response will be a documentation page
for that node.  If no node is matched, a 404 error will result.

If not specified, the default value is '_doc'.

=head3 doc_index

If specified, the value of this attribute must be a string.  It is only
relevant if the feature C<doc_index> is enabled.  In that case, any URL path
ending in '/' followed by this string will have that last part removed, and if
the resulting path matches a data service node then the response will be a
documentation page for that node.  If no node is matched, a 404 error will
result. 

If not specified, the default value is 'index'.

=head3 doc_template_dir

If specified, the value of this attribute must be a directory path relative to
the application root directory.  Documentation template paths will be looked
up relative to this directory.

If not specified, the default value is 'doc'.

=head3 doc_output_dir

If specified, the value of this attribute must be a directory path relative to
the application root directory.  Output template paths will be looked
up relative to this directory.

If not specified, then templated output will not be available.  [Note:
templated output is not yet implemented].

=head3 data_source

If specified, the value of this attribute must be a string.  It will be
reported, if requested by the 'datainfo' parameter, in the header of the
response.  Its purpose is to indicate the project, database, etc. from which
the returned data has been drawn.

=head3 data_provider

If specified, the value of this attribute must be a string.  It will be
reported, if requested by the 'datainfo' parameter, in the header of the
response.  Its purpose is to indicate the organization which is providing this
data.

=head3 data_license

If specified, the value of this attribute must be a string.  It will be
reported, if requested by the 'datainfo' parameter, in the header of the
response.  Its purpose is to indicate the name of the license under which this
data is being made available.

=head3 license_url

If specified, the value of this attribute must be a valid URL.  It will be
reported, if requested by the 'datainfo' parameter, in the header of the
response.  Its purpose is provide a link by which more information about the
license terms may be found.

=head3 admin_name

If specified, the value of this attribute will be reported in the standard
documentation footer as the "contact person" to whom bug reports, feedback, or other
queries about this service should be addressed.

=head3 admin_email

If specified, the value of this attribute will be reported in the standard
documentation footer as the "contact address" to which bug reports, feedback, or other
queries about this service should be addressed.

=head2 Node definitions

Data service nodes are the fundamental organizing elements of a data service
definition.  They are defined by calling the method C<define_node> on a data
service instance.  These nodes correspond to the various resources provided by
the data service.  Any node for which the attributes C<role> and C<method> are
both defined will correspond to a data service operation (we call these
"operation nodes") while other nodes may correspond to documentation pages or
files.

The only required attribute for a node is C<path>, which provides a unique
key.  Most attributes of data service nodes are inherited path-wise.  That is,
a node with path "a/b" will inherit any attributes that are not explicitly
provided with values from the node with path "a".  The node with path "/"
functions as the root, and its attribute values provide defaults for all of
the other nodes.  Any node attribute can be explicitly disabled, regardless of
inheritance, by specifying its value as the empty string.  The few attributes
that are not inherited will be noted below.

Most of the attributes listed here may also be specified in the application
configuration file, in the same way as data service attributes.  In that case,
they will provide default values for the nodes.  Attributes for which you wish
to give the same value to all (or most) nodes can be conveniently specified in
this way, or you can specify them when defining the root node "/".  You can always
override them at a lower level of the node hierarchy, if you wish.

The node attributes do not have accessor methods.  Rather, you can retrieve
the value of any node attribute by using the C<node_attr> method of the data
service instance or of a request instance:

    # either of the following:
    
    $attribute_value = $ds->node_attr($path, $attr_name);
    $attribute_value = $request->node_attr($attr_name);

For example, each operation subroutine is passed a reference to a request
object.  This request object itself has many attributes (with accessors) that
are derived from the data service node corresponding to the request.  However,
you can if necessary query for arbitrary node attributes:

    sub my_operation {
        my ($request) = @_;
        my $default_limit = $request->node_attr('default_limit');
        ...

=head2 Node attributes

With the exception of C<path>, each of these attributes is optional.

=head3 path

This attribute is required for every node, and must be unique among the nodes
defined for this data service.  For each incoming request, the URL path and
parameters are processed in various ways (depending upon which data service
features and special parameters have been enabled) to extract a path which is
compared to the set of defined nodes.  If one matches, then the attributes of
that node will be used to generate the appropriate response.  Otherwise, a 404
error ("not found") will be returned to the client.

=head3 disabled

If this attribute is given a true value, then it (and all its children) will
be ignored as if they were never defined.  Any request matching this node's
path will return a 404 error.

=head3 undocumented

If this attribute is given a true value, then any request asking for
documentation about this node will return a 404 error.  The node will still be
active for requests that ask for its operation.  This allows you to provide
undocumented data service operations, while explicitly noting that fact in
your code.

=head3 title

The value of this attribute must be a string, which will be used as the title
for any documentation generated about the node.  If not specified, the node
path will be used instead.  This attribute is B<not inherited>.

=head3 method

A node that has both this attribute and the attribute L</role> is considered to
be an "operation node".  Its value must be the name of a subroutine in the
package specified by C<role>.

=head3 role

If this attribute is specified, its value must be a L<Moo> L<Role|Moo::Role>
defined by an already-loaded package.  The L</method> attribute of this node
must be the name of a subroutine in this package.  Note: you may wish to
define this attribute (as well as other inheritable attributes) for a
non-operation node that has operation nodes as children.

=head3 arg

This attribute is only relevant for operation nodes.  If specified, its
value will be provided as an argument when the specified method is called
to carry out the operation.  By means of this attribute, you can arrange for
more than one node to call the same method, and have that method behave
differently depending upon which argument it receives.

=head3 ruleset

This attribute is only relevant for operation nodes.  Its value must be
the name of a ruleset defined for this data service instance.  This ruleset
will be automatically used to validate the URL parameters for any request that
matches this node.

If this attribute is not specified, a ruleset name will be automatically
generated by taking the node path, changing any slashes into colons, and
adding the ruleset prefix if any has been defined for this data service.  If
that name corresponds to a defined ruleset, that ruleset will be used.  You
will probably find it convenient to use these auto-generated ruleset names in
most cases, and will rarely need to use this attribute.

=head3 output

This attribute is only relevant for operation nodes.  Its value must be the
name of an output block defined for this data service, or the names of more
then one output block separated by commas and optional whitespace.  For
example:

    output => 'block1, block2'

This block or blocks will make up the fixed output of this node's operation.

=head3 output_label

The value attribute will be used to label the fixed output blocks in the
response documentation.  Its value must be a string.  If not specified, it
defaults to C<basic>.

=head3 optional_output

If specified, the value of this attribute must be the name of a single output
map (in other words, a set) defined for this data service.  This will be used,
in conjunction with the value of the special parameter C<show>, to select
additional output blocks to be included in a response.  This attribute is
useless unless the special parameter C<show> is enabled, and will only be used
when responding to requests that include a value for that parameter.

=head3 public_access

If this attribute is given a true value, then all response messages generated
in association with this node will have the CORS header
"Access-control-allow-origin" set to "*".  Until we provide better means of
controlling the CORS header in a later version of this framework, we suggest
that you always set this to true for the root node.

=head3 send_files

If this attribute is given a true value, then this node represents a directory
of files that can be requested by clients.  If you set this attribute, you
must also set L</file_dir>.  This functionality is necessary in order to send
the CSS file that accompanies documentation pages, and you may also create
file-sending nodes for other purposes as well.

=head3 file_dir

If this attribute is specified, its value must be a directory path relative to
the "public file" directory established by the foundation framework (for
Dancer, this is the directory "public" under the application root).  This
attribute is only relevant for a node with the L</send_files> attribute set to
true.

=head3 default_format

The value of this attribute must be the name of one of the formats defined for
this data service.  If no output format can be determined from the request URL
and/or parameters, then the specified format will be used for all operation
requests matching this node.  If the data service will only be returning data
in a single format, then you can use this attribute to specify it.

=head3 default_limit

The value of this attribute will put a limit on the size of the result set for
all operation requests matching this node, unless overridden by the special
parameter L</limit>.  The purpose of this attribute is to prevent
badly-composed requests from accidentally generating an enormous result set.
A client can always include C<limit=all> in the request parameters to retrieve
the full result set.  However, if clients leave that parameter off unless
needed, an additional backstop is provided.  The value of this attribute must
be a positive integer.  In general, you will want to make sure that C<limit>
is enabled if you use this attribute (it is included in the standard set of
special parameters).

=head3 default_header

By default, text format output includes a header unless the client explicitly
turns it off by including C<header=no> in the request parameters.  If this
parameter is set to a B<false> value, then no header will be provided for text
format responses matching this node unless explicitly requested by the client
using C<header=yes>.  In general, you will want to make sure that C<header>
is enabled if you use this attribute (it is included in the standard set of
special parameters).

=head3 default_datainfo

By default, information about the dataset is included in a response only if
the client requests it by including C<datainfo=yes> in the request
parameters.  If this attribute is set to a true value, then this information
will be included by default for all operation requests matching this node
unless the client specifies C<datainfo=no> (assuming that the special
parameter C<datainfo> is active).  In general, you will want to make sure
that C<datainfo> is enabled if you use this attribute (it is included in the
standard set of special parameters).

=head3 default_count

By default, a count of the number of records found and returned is included in
a response only if the client requests it by including C<count=yes> in the
request parameters.  If this attribute is set to a true value, then this
information will be included by default for all operation requests matching
this node unless the client specifies C<count=no>.

=head3 default_linebreak

The value of this attribute must be either 'crlf', 'cr', or 'lf'.  If not
specified, it defaults to 'crlf'.  The specified character sequence will be
used to separate the lines of any text format output from requests that
match this node, unless overridden by the special parameter C<linebreak>.

=head3 default_save_filename

The value of this attribute will used for the 'content-disposition' header of
the response message for requests matching this node, if the special parameter
C<save> is given with a basic 'true' value and not a filename.  The name of
the requested output format will automatically be appended as a suffix, so no
suffix should be included in this attribute value.  For requests given through
a web browser, most browsers will offer to save the file under this name.

=head3 stream_threshold

The value of this attribute must be a positive integer.  It is only relevant
if the feature C<stream_data> is enabled for this data service.  Any response
whose length exceeds the value of this attribute will be streamed to the
client instead of sent as a single message.  This feature is a good idea to
enable for any service that can produce responses of more than a few hundred
kilobytes.  If the feature is enabled but this attribute is not specified, it
defaults to 100Kb.

=head3 allow_method

This is a set-valued attribute.  The individual values must be HTTP method
types (i.e. GET, POST), specifying which HTTP methods are valid for requests
matching this node.  If not specified, then the methods C<GET> and C<HEAD> are
allowed.

=head3 allow_format

This is a set-valued attribute.  The individual values must be the names of
output formats defined for this data service, specifying which ones are valid
for requests matching this node.  If not specified, then all defined formats
are allowed.

=head3 allow_voab

This is a set-valued attribute.  The individual values must be the names of
vocabularies defined for this data service, specifying which ones are valid
for requests matching this node.  If not specified, then all defined
vocabularies are allowed.

=head3 doc_template

The value of this attribute must be a file pathname relative to the
L<documentation template directory|/doc_template_dir>.  The specified template
file will be used to respond to any documentation requests matching this node.
If not specified, then an automatic path will be constructed by starting with
the node path and adding "_doc" followed by the filename suffix specified by
the templating plugin.  If no file is found under that name, then the node
path followed by "/index" and the same suffix is tried.  You will probably
find it easiest to name your documentation files according to one of these two
patterns, so that you will rarely if ever need to specify a value for this
attribute.

=head3 doc_default_op_template

When a request for documentation matches this node, if the template specified
by the L</doc_template> attribute is not found, and if the automatic paths are
not found either, then the value of this attribute is tried next if this is an
operation node.  If specified, the attribute value must be a file pathname
relative to the L<documentation template directory|/doc_template_dir>.  The
contents of the template should be a generic "operation documentation"
template that can be filled in from the node attributes such as
L</doc_string>.  In most cases, you will want to specify this attribute at
the root node so that its value will be inherited by all of the other nodes.

=head3 doc_default_template

When a request for documentation matches this node, if none of the other
template paths correspond to an actual template file on disk, then the value
of this attribute will be tried as a final default.  The contents of this
template might say something like "no documentation can be found".  If not
specified, the default value is 'doc_not_found' followed by the appropriate
suffix for the selected templating engine (i.e. '.tt' for Template Toolkit).

=head3 doc_string

You can set this attribute either directly or by including one or more
documentation strings after the node attribute hash in the call to
C<define_node>.  The default documentation templates use this as the main
description on each documentation page.

=head3 doc_defs

If specified, the value of this attribute must be a file path relative to the
documentation template directory.  This file will be evaluated before each
documentation template is rendered.  Its purpose is to define elements to be
used by the documentation template, header, and footer.  You may set this to
the empty string if you do not wish a definition file to be used.

If not specified, the default value is 'doc_defs' followed by the appropriate
suffix for the selected templating engine (i.e. '.tt' for Template Toolkit).

=head3 doc_header

If specified, the value of this attribute must be a file path relative to the
documentation template directory.  This file will be evaluated before each
documentation template is rendered, after the file specified by L</doc_defs>.
Its purpose is to generate a header for the documentation pages.  You may set
this to the empty string if you do not wish a header to be applied to the
documentation pages.

If not specified, the default value is 'doc_header' followed by the
appropriate suffix for the selected templating engine (i.e. '.tt' for Template
Toolkit).

=head3 doc_footer

If specified, the value of this attribute must be a file path relative to the
documentation template directory.  This file will be evaluated after each
documentation template is rendered.  Its purpose is to generate a footer for
the documentation pages.  You may set this to the empty string if you do not
wish a footer to be applied to the documentation pages.

If not specified, the default value is 'doc_footer' followed by the
appropriate suffix for the selected templating engine (i.e. '.tt' for Template
Toolkit).

=head3 doc_stylesheet

If specified, the value of this attribute must be an absolute or relative URL
(I<not a file path>) which should refer to a stylesheet file to go with the
documentation pages.  If you wish the data service to provide this file, you
will need to define a data service node with the 'send_files' attribute.
Typically, this node will have the path "css", and will point to a
similarly-named subdirectory of the public file directory set up by the
foundation framework ("public" for Dancer).

If not specified, the default value is a URL generated using the appropriate
pattern for this data service for the node path "/css/dsdoc.css".  The default
installation of this framework includes an appropriate CSS file under that
name, which you can edit however you choose.

=head2 Format definitions



=head2 Format attributes

=head2 Vocabulary attributes

=head2 Set element attributes

=head2 Output element attributes

=head1 AUTHOR

mmcclenn "at" cpan.org

=head1 BUGS

Please report any bugs or feature requests to C<bug-web-dataservice at rt.cpan.org>, or through the web interface at
L<http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Web-DataService>.  I will be
notified, and then you'll automatically be notified of progress on your bug as
I make changes.

=head1 COPYRIGHT & LICENSE

Copyright 2014 Michael McClennen, all rights reserved.

This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.

